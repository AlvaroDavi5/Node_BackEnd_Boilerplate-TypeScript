{
	"$schema": "https://json.schemastore.org/eslintrc",
	"root": true,
	"env": {
		"es6": true,
		"node": true,
		"jest": true,
		"browser": true
	},
	"extends": [
		"standard",
		"prettier"
	],
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"ecmaVersion": 2020,
		"sourceType": "module"
	},
	"plugins": [
		"@typescript-eslint",
		"prettier"
	],
	"rules": {
		"indent": [
			"error",
			"tab"
		],
		"quotes": [
			"error",
			"single"
		],
		"semi": [
			"error",
			"always"
		],
		"no-trailing-spaces": "error",
		"eqeqeq": [
			"error",
			"always"
		],
		"max-len": [
			"warn",
			160
		],
		"no-multiple-empty-lines": [
			"error",
			{
				"max": 2,
				"maxEOF": 1,
				"maxBOF": 1
			}
		],
		"camelcase": "warn",
		"no-underscore-dangle": "warn",
		"comma-spacing": [
			"error",
			{
				"before": false,
				"after": true
			}
		],
		"object-curly-spacing": [
			"error",
			"always"
		],
		"max-classes-per-file": [
			"error",
			1
		],
		"eol-last": "error",
		"complexity": "error",
		"constructor-super": "error",
		"no-useless-constructor": "off",
		"no-invalid-this": "error",
		"no-new-wrappers": "error",
		"no-throw-literal": "error",
		"no-fallthrough": "error",
		"no-unsafe-finally": "error",
		"guard-for-in": "error",
		"default-case": "error",
		"default-case-last": "error",
		"default-param-last": "error",
		"curly": "off",
		"brace-style": "error",
		"block-spacing": [
			"error",
			"always"
		],
		"array-bracket-spacing": [
			"error",
			"never"
		],
		"comma-style": [
			"error",
			"last"
		],
		"comma-dangle": "off",
		"object-shorthand": "warn",
		"new-parens": "error",
		"arrow-parens": "error",
		"arrow-body-style": "off",
		"id-denylist": [
			"error",
			"err",
			"e",
			"a",
			"b",
			"cb"
		],
		"id-match": "off",
		"no-bitwise": "off",
		"no-caller": "warn",
		"radix": "warn",
		"valid-typeof": "error",
		"one-var": "off",
		"prefer-const": "warn",
		"no-undef": "error",
		"no-undef-init": "warn",
		"no-constant-condition": "error",
		"no-cond-assign": "error",
		"no-empty": "error",
		"no-template-curly-in-string": "warn",
		"for-direction": "error",
		"computed-property-spacing": "off",
		"implicit-arrow-linebreak": "off",
		"function-call-argument-newline": "off",
		"func-call-spacing": [
			"error",
			"never"
		],
		"dot-location": [
			"error",
			"property"
		],
		"dot-notation": [
			"error",
			{
				"allowKeywords": true,
				"allowPattern": "throws"
			}
		],
		"use-isnan": "error",
		"no-eval": "error",
		"no-var": "error",
		"no-labels": "error",
		"no-unused-labels": "error",
		"no-debugger": "error",
		"no-console": "warn",
		"spaced-comment": [
			"warn",
			"always",
			{
				"line": {
					"markers": [
						"/"
					],
					"exceptions": [
						"_",
						"-",
						"+",
						"*"
					]
				},
				"block": {
					"markers": [
						"!"
					],
					"exceptions": [
						"*"
					],
					"balanced": true
				}
			}
		],
		"jsx-quotes": [
			2,
			"prefer-double"
		],
		"key-spacing": [
			2,
			{
				"beforeColon": false,
				"afterColon": true,
				"mode": "strict"
			}
		],
		"keyword-spacing": [
			"error",
			{
				"before": true,
				"after": true,
				"overrides": {
					"return": {
						"after": true
					},
					"throw": {
						"after": true
					},
					"case": {
						"after": true
					}
				}
			}
		],
		"linebreak-style": [
			2,
			"unix"
		],
		"lines-around-directive": [
			2,
			{
				"before": "always",
				"after": "always"
			}
		],
		"no-array-constructor": 2,
		"no-compare-neg-zero": 2,
		"no-extra-parens": 2,
		"no-return-assign": [
			2,
			"always"
		],
		"operator-linebreak": [
			2,
			"none",
			{
				"overrides": {
					"?": "before",
					":": "before",
					"&&": "before",
					"||": "before"
				}
			}
		],
		"prefer-object-spread": 2,
		"prefer-rest-params": 2,
		"prefer-template": "error",
		"quote-props": [
			2,
			"as-needed",
			{
				"keywords": false
			}
		],
		"rest-spread-spacing": [
			2,
			"never"
		],
		"semi-spacing": [
			2,
			{
				"before": false,
				"after": true
			}
		],
		"semi-style": [
			2,
			"last"
		],
		"space-before-blocks": [
			2,
			{
				"functions": "always",
				"keywords": "always",
				"classes": "always"
			}
		],
		"space-before-function-paren": [
			"error",
			{
				"anonymous": "always",
				"named": "never",
				"asyncArrow": "always"
			}
		],
		"space-in-parens": [
			2,
			"never"
		],
		"space-infix-ops": [
			2
		],
		"space-unary-ops": [
			2,
			{
				"words": true,
				"nonwords": false
			}
		],
		"switch-colon-spacing": [
			2,
			{
				"after": true,
				"before": false
			}
		],
		"template-curly-spacing": [
			2,
			"never"
		],
		"template-tag-spacing": [
			2,
			"never"
		],
		"unicode-bom": [
			2,
			"never"
		],
		"wrap-iife": [
			2,
			"outside",
			{
				"functionPrototypeMethods": true
			}
		],
		"wrap-regex": [
			2
		],
		"yield-star-spacing": [
			2,
			{
				"before": false,
				"after": true
			}
		],
		"yoda": [
			2,
			"never",
			{
				"exceptRange": true,
				"onlyEquality": false
			}
		],
		"prefer-destructuring": "warn",
		"prefer-spread": "warn",
		"security/detect-object-injection": "warn",
		"import/order": "off",
		"import/default": "off",
		"import/no-extraneous-dependencies": [
			"error",
			{
				"devDependencies": [
					"scripts/**",
					"tests/**"
				],
				"peerDependencies": true,
				"optionalDependencies": false,
				"bundledDependencies": false
			}
		],
		"import/unambiguous": "warn",
		"@typescript-eslint/ban-ts-ignore": "off",
		"@typescript-eslint/ban-ts-comment": "off",
		"@typescript-eslint/ban-types": [
			"error",
			{
				"types": {
					"Object": {
						"message": "Avoid using the `Object` type. Did you mean `object`?"
					},
					"Function": {
						"message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
					},
					"Boolean": {
						"message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
					},
					"Number": {
						"message": "Avoid using the `Number` type. Did you mean `number`?"
					},
					"String": {
						"message": "Avoid using the `String` type. Did you mean `string`?"
					},
					"Symbol": {
						"message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
					}
				}
			}
		],
		"@typescript-eslint/array-type": "warn",
		"@typescript-eslint/consistent-type-assertions": "warn",
		"@typescript-eslint/no-non-null-assertion": "warn",
		"@typescript-eslint/no-explicit-any": "warn",
		"@typescript-eslint/no-empty-function": "warn",
		"@typescript-eslint/no-empty-interface": "warn",
		"@typescript-eslint/no-use-before-define": "error",
		"@typescript-eslint/no-unused-expressions": "error",
		"@typescript-eslint/no-unused-vars": "error",
		"@typescript-eslint/no-var-requires": "warn",
		"@typescript-eslint/no-misused-new": "warn",
		"@typescript-eslint/no-namespace": "warn",
		"@typescript-eslint/prefer-namespace-keyword": "warn",
		"@typescript-eslint/prefer-function-type": "warn",
		"@typescript-eslint/prefer-for-of": "warn",
		"@typescript-eslint/unified-signatures": "warn",
		"@typescript-eslint/adjacent-overload-signatures": "error",
		"@typescript-eslint/member-ordering": "off",
		"@typescript-eslint/naming-convention": "off",
		"@typescript-eslint/no-parameter-properties": "off",
		"@typescript-eslint/no-shadow": [
			"warn",
			{
				"hoist": "all"
			}
		],
		"@typescript-eslint/triple-slash-reference": [
			"warn",
			{
				"path": "always",
				"types": "prefer-import",
				"lib": "always"
			}
		],
		"@typescript-eslint/explicit-member-accessibility": [
			"off",
			{
				"accessibility": "explicit"
			}
		]
	},
	"overrides": [
		{
			"extends": [
				"plugin:@typescript-eslint/recommended",
				"plugin:@typescript-eslint/eslint-recommended",
				"plugin:import/typescript",
				"plugin:security/recommended"
			],
			"parser": "@typescript-eslint/parser",
			"plugins": [
				"eslint-plugin-import",
				"eslint-plugin-jsdoc",
				"@typescript-eslint"
			],
			"rules": {},
			"files": [
				"*.ts",
				"*.tsx",
				"*.js",
				"*.jsx"
			]
		},
		{
			"files": "scripts/**",
			"rules": {
				"no-console": "off"
			}
		}
	],
	"settings": {
		"import/resolver": {
			"node": {
				"paths": [
					"src"
				]
			}
		}
	}
}