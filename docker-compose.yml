# Docker Compose Version
version: '3.7'

# Containers
services:

  # Application
  app:
    container_name: App_Node
    #image: node:alpine
    # Refered Dockerfile
    build: ./
    #user: root
    env_file: ./envs/.env.development
    #working_dir: /app
    #command: ['./init.sh']
    ports:
      # network_port:host_port
      - 3000:3000
    networks:
      - default_network
    volumes:
      - ./package.json:/app/package.json
      - ./yarn.lock:/app/yarn.lock
      - ./tsconfig.build.json:/app/tsconfig.build.json
      - ./src:/app/src
      - ./init.sh:/app/init.sh
      - /node_modules
    depends_on:
      - database
      - cloud
      - cache
      - data

  # Relational DataBase
  database:
    container_name: DataBase_PostgreSQL
    image: postgres:latest
    user: root
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: db_postgres
    ports:
      - 5432:5432
    networks:
      - default_network
    volumes:
      # host_path:container_path
      - db_volume:/var/lib/postgresql/
  # Relational DataBase Admin
  database_admin:
    container_name: DataBaseAdmin_Adminer
    image: adminer:latest
    ports:
      - 8080:8080
    networks:
      - default_network
    depends_on:
      - database

  # Non-Relational Database
  data:
    container_name: Data_MongoDB
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: pass
    ports:
      - 27017:27017
    networks:
      - default_network
  # NoSQL Admin
  data_admin:
    container_name: DataAdmin_MongoExpress
    image: mongo-express:latest
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: pass
      ME_CONFIG_MONGODB_URL: mongodb://admin:pass@data:27017/
    ports:
      - 8081:8081
    networks:
      - default_network
    depends_on:
      - data

  # Cache
  cache:
    container_name: Cache_Redis
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      - default_network
  # Cache Admin
  cache_admin:
    container_name: CacheAdmin_RedisCommander
    image: rediscommander/redis-commander:latest
    hostname: redis-commander
    environment:
      REDIS_HOSTS: localhost:cache:6379
    ports:
      - 8082:8081
    networks:
      - default_network
    depends_on:
      - cache

  # AWS Cloud Services
  cloud:
    container_name: Cloud_LocalStack
    image: localstack/localstack:latest
    environment:
      - AWS_DEFAULT_REGION=us-east-1
      - EDGE_PORT=4566
      - SERVICES=sqs,sns,s3,cognito
      - SKIP_SSL_CERT_DOWNLOAD=1
    ports:
      - 4566:4566
      - 4510-4559:4510-4559
    networks:
      - default_network
    volumes:
      - ${TMPDIR:-/tmp/localstack}:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock

  # CI
  pipeline:
    container_name: CI_Jenkins
    image: jenkins/jenkins:latest
    environment:
      - DOCKER_TLS_CERTDIR=certs
    ports:
      - 9000:8080
    volumes:
      - ci_volume:/var/jenkins_home
    networks:
      - monitoring_network

  # Code Quality
  quality:
    container_name: Quality_SonarQube
    image: sonarqube:latest
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    ports:
      - 9001:9000
      - 9092:9092
    networks:
      - default_network

  # Monitoring
  monitor:
    container_name: Monitoring_Grafana
    image: grafana/grafana:latest
    ports:
      - 9002:3000
    networks:
      - monitoring_network

# Networks for Containers
networks:
  default_network:
    driver: bridge
  monitoring_network:
    driver: bridge

# Volumes for Containers
volumes:
  db_volume:
    name: db_volume
    driver: local
  ci_volume:
    name: ci_volume
    driver: local
